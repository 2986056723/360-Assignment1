/*
 * TCSS 360 Group Assignment 1
 * Fall 2021
 */
import java.util.Scanner;

/**
 * Individual MinesWeeper
 *
 * @author Chenli Qian
 * @version 2021/10/10
 *
 */
public class MinesWeeper {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        char[][] matrix = null;

        int cols = 0;
        int rows = 0;
        int row = 0;
        int index = 1;
        StringBuffer sb = new StringBuffer();
        //read from console
        while (scan.hasNextLine()){
            String str = scan.nextLine();
            if(str.matches("0 0")){//input0 0 means end
                System.out.println();
                break;
            }else if(str.matches(".*\\d.*")){
                String[] tokens = str.split("[ ]+");
                //read rows and cols
                rows = Integer.parseInt(tokens[0]);
                cols = Integer.parseInt(tokens[1]);

                row = 0;

                matrix = new char[rows][cols];

            }else{
                for(int col = 0; col < cols; col++){
                    matrix[row][col] = str.charAt(col);
                }

                row++;

                if(row == rows){
                    char[][] finalMatrix = cheak(matrix);
                    sb.append(printMatrix(finalMatrix,index++));
                }
            }
        }
        System.out.println(sb.toString());
    }

    /**
     * Encapsulate the result matrix into a string for printing
     * @param matrix
     * @return
     */
    private static String printMatrix(final char[][] matrix,final int index) {
        final int rows = matrix.length;
        final int cols = matrix[0].length;
        StringBuffer sb = new StringBuffer();
        sb.append("Field #"+ index + ":\n");
        for(int row = 0 ; row < rows; row++){
            for(int col= 0; col < cols; col++){
                sb.append(matrix[row][col]);
            }
            sb.append("\n");
        }
        sb.append("\n");
        return sb.toString();
    }

    /**
     * calculate result
     * @param matrix
     * @return
     */
    private static char[][] cheak(final char[][] matrix) {
        //get rows and cols
        final int rows = matrix.length;
        final int cols = matrix[0].length;
        final char[][] resultMatrix = new char[rows][cols];

        int count;//


        for(int row = 0; row < rows;row++){

            for(int col = 0;col < cols;col++){
                if(matrix[row][col]=='*'){
                    resultMatrix[row][col]=matrix[row][col];
                }else{
                    count = 0;

                    if(col - 1 >= 0 && matrix[row][col-1]=='*'){
                        count++;
                    }
                    if(col+1<cols && matrix[row][col+1]=='*'){
                        count++;
                    }


                    if(row-1>=0 && matrix[row-1][col] == '*'){
                        count++;
                    }
                    if(row+1<rows && matrix[row+1][col] == '*'){
                        count++;
                    }


                    if(row-1>=0&&col-1>=0&&matrix[row-1][col-1]=='*'){
                        count++;
                    }

                    if(row-1>=0&&col+1<cols && matrix[row-1][col+1]=='*'){
                        count++;
                    }

                    if(row+1<rows&&col-1>=0 && matrix[row+1][col-1]=='*'){
                        count++;
                    }

                    if(row+1<rows && col+1<cols && matrix[row+1][col+1]=='*'){
                        count++;
                    }
                    resultMatrix[row][col] = String.valueOf(count).charAt(0);
                }
            }
        }

        return resultMatrix;
    }
}
